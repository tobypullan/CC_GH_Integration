name: MPI-HDF5 Workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenmpi-dev openmpi-bin libhdf5-openmpi-dev libhdf5-dev hdf5-tools build-essential gfortran
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip wheel setuptools
        # Install mpi4py with Open-MPI
        export MPICC=/usr/bin/mpicc HDF5_MPI="ON"
        pip install --no-binary mpi4py mpi4py
        # Install h5py with MPI support
        export HDF5_DIR=/usr/lib/x86_64-linux-gnu/hdf5/openmpi CC=mpicc
        pip install --no-binary h5py h5py
        # Install other dependencies
        pip install numpy scipy matplotlib
        pip install -r requirements.txt
    
    - name: Verify MPI and HDF5 setup
      run: |
        echo "=== Verification ==="
        mpirun --version | head -1
        python -c "import mpi4py; print(f'mpi4py version: {mpi4py.__version__}')"
        python -c "import h5py; print(f'h5py version: {h5py.__version__}, MPI support: {h5py.get_config().mpi}')"
    
    - name: Run MPI test
      run: |
        cat > test_mpi.py << 'EOF'
        from mpi4py import MPI
        import numpy as np
        import h5py
        
        comm = MPI.COMM_WORLD
        rank = comm.Get_rank()
        size = comm.Get_size()
        
        print(f"Process {rank} of {size} is running")
        
        if size > 1:
            with h5py.File('parallel_test.h5', 'w', driver='mpio', comm=comm) as f:
                dset = f.create_dataset('test', (size, 10), dtype='f')
                dset[rank] = np.arange(10) * (rank + 1)
            
            with h5py.File('parallel_test.h5', 'r', driver='mpio', comm=comm) as f:
                data = f['test'][rank]
                print(f"Rank {rank} read: {data}")
        else:
            print("Running with single process - skipping parallel HDF5 test")
        EOF
        
        mpirun -np 2 python test_mpi.py
    
    - name: Run project tests
      run: |
        cd tests
        python test_vector_ops.py
        python extended_tests.py